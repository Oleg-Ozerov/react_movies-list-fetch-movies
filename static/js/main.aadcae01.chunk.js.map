{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","api/api.js","components/FindMovie/FindMovie.js","App.js","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","MoviesList","movies","map","movie","key","imdbId","getMovie","fetch","then","response","json","FindMovie","addMovie","useState","setTitle","setMovie","error","setError","preview","setPrewiew","isAddPossible","setIsAddPossible","findMovie","a","foundMovie","Response","Title","Plot","Poster","imdbID","onSubmit","event","preventDefault","htmlFor","type","id","placeholder","classNames","autoComplete","value","onChange","target","onClick","App","data","setMovies","newMovie","some","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.aadcae01.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\nimport PropTypes from 'prop-types';\n\nexport const MovieCard = ({\n  title,\n  description = '',\n  imgUrl,\n  imdbUrl,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n};\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport PropTypes from 'prop-types';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({\n  movies = [],\n}) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      imdbId: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n","const API_URL = 'http://www.omdbapi.com/?i=tt3896198&apikey=422c2f98&t=';\n\nexport const getMovie = title => fetch(`${API_URL}${title}`)\n  .then(response => response.json());\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport classNames from 'classnames';\nimport './FindMovie.scss';\n\nimport { MovieCard } from '../MovieCard';\nimport { getMovie } from '../../api/api';\n\nexport const FindMovie = ({ addMovie }) => {\n  const [title, setTitle] = useState('');\n  const [movie, setMovie] = useState(null);\n  const [error, setError] = useState(false);\n  const [preview, setPrewiew] = useState(false);\n  const [isAddPossible, setIsAddPossible] = useState(false);\n\n  const handleChange = (event) => {\n    setTitle(event.target.value);\n    setError(false);\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    setPrewiew(false);\n    setTitle('');\n\n    if (isAddPossible) {\n      addMovie(movie);\n      setIsAddPossible(false);\n    }\n  };\n\n  const findMovie = async() => {\n    if (!title) {\n      setError(true);\n\n      return;\n    }\n\n    const foundMovie = await getMovie(title);\n\n    if (foundMovie.Response === 'False') {\n      setError(true);\n      setPrewiew(false);\n      setIsAddPossible(false);\n\n      return;\n    }\n\n    setMovie({\n      title: foundMovie.Title,\n      description: foundMovie.Plot,\n      imgUrl: foundMovie.Poster,\n      imdbUrl: `https://www.imdb.com/title/${foundMovie.imdbID}/`,\n      imdbId: foundMovie.imdbID,\n    });\n\n    setError(false);\n    setIsAddPossible(true);\n    setPrewiew(true);\n    setTitle('');\n  };\n\n  return (\n    <>\n      <form className=\"find-movie\" onSubmit={handleSubmit}>\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={classNames('input', {\n                'is-danger': error,\n              })}\n              autoComplete=\"off\"\n              value={title}\n              onChange={handleChange}\n            />\n          </div>\n          {error && (\n            <p className=\"help is-danger\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-light\"\n              onClick={findMovie}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            <button\n              type=\"submit\"\n              className=\"button is-primary\"\n            >\n              Add to the list\n            </button>\n          </div>\n        </div>\n      </form>\n\n      {preview && (\n        <div className=\"container\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard {...movie} />\n        </div>\n      )}\n\n    </>\n  );\n};\n\nFindMovie.propTypes = {\n  addMovie: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport data from './api/movies.json';\n\nexport const App = () => {\n  const [movies, setMovies] = useState(data);\n\n  const addMovie = (newMovie) => {\n    if (movies.some(movie => movie.imdbId === newMovie.imdbId)) {\n      return;\n    }\n\n    setMovies(\n      [newMovie, ...movies],\n    );\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <FindMovie addMovie={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}